<?xml version="1.0" encoding="UTF-8"?>
	<!--

		Copyright 2009 Robin Komiwes, Bruno Verachten, Christophe Cordenier

		Licensed under the Apache License, Version 2.0 (the "License"); you
		may not use this file except in compliance with the License. You may
		obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0 Unless required by
		applicable law or agreed to in writing, software distributed under the
		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
		CONDITIONS OF ANY KIND, either express or implied. See the License for
		the specific language governing permissions and limitations under the
		License.
	-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security-3.0.xsd">

	<bean id="security-properties"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreUnresolvablePlaceholders">
			<value>true</value>
		</property>
		<property name="locations">
			<list>
				<value>
					classpath*:config/security.properties
				</value>
				<value>
					classpath*:config/tapestry.properties
				</value>
			</list>
		</property>
	</bean>

	<bean id="wookiSecurityContext" class="com.wooki.services.security.WookiSecurityContextImpl" />

	<!-- Match tapestry public page -->
	<bean id="tapestryPublicPageMatcher"
		class="com.wooki.services.security.spring.TapestryPublicUrlPathMatcher">
		<constructor-arg>
			<list>
				<value></value>
				<value>index</value>
				<value>book</value>
				<value>book/index</value>
				<value>chapter</value>
				<value>chapter/index</value>
				<value>chapter/issues</value>
				<value>searchresult</value>
				<value>error/generic</value>
			</list>
		</constructor-arg>
		<property name="productionMode" value="${tapestry.production-mode}" />
		<property name="encoding" value="${tapestry.charset}" />
	</bean>

	<!-- This matcher will allow us to map multiple matcher -->
	<bean id="delegatingUrlMatcher"
		class="com.wooki.services.security.spring.DelegatingUrlPathMatcher">
		<constructor-arg>
			<map>
				<entry key="tapestry-public-page" value-ref="tapestryPublicPageMatcher" />
			</map>
		</constructor-arg>
		<property name="requiresLowerCaseUrl" value="true" />
	</bean>

	<bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
		<property name="matcher" ref="delegatingUrlMatcher" />
		<property name="stripQueryStringFromUrls" value="false" />
		<property name="filterChainMap">
			<map>
				<entry key="/assets/.*">
					<list>
						<ref bean="httpSessionContextIntegrationFilter" />
					</list>
				</entry>
				<entry key="/signin.*">
					<list>
						<ref bean="httpSessionContextIntegrationFilter" />
					</list>
				</entry>
				<entry key="/signup.*">
					<list>
						<ref bean="httpSessionContextIntegrationFilter" />
					</list>
				</entry>
				<entry key="/j_spring_security_logout.*">
					<list>
						<ref bean="httpSessionContextIntegrationFilter" />
						<ref bean="logoutFilter" />
					</list>
				</entry>
				<entry key="/j_spring_security_check.*">
					<list>
						<ref bean="httpSessionContextIntegrationFilter" />
						<ref bean="authenticationProcessingFilter" />
					</list>
				</entry>

				<entry key="tapestry-public-page">
					<list>
						<ref bean="httpSessionContextIntegrationFilter" />
					</list>
				</entry>

				<entry key="/.*">
					<list>
						<ref bean="httpSessionContextIntegrationFilter" />
						<ref bean="securityContextHolderAwareRequestFilter" />
						<ref bean="exceptionTranslationFilter" />
						<ref bean="filterSecurityInterceptor" />
					</list>
				</entry>
			</map>
		</property>
	</bean>

	<bean id="wookiPasswordEncoder"
		class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" />

	<bean id="wookiSaltSource"
		class="org.springframework.security.authentication.dao.SystemWideSaltSource">
		<property name="systemWideSalt" value="${wooki.salt}" />
	</bean>

	<bean id="wookiUserDetailsService" class="com.wooki.services.security.UserDetailsServiceImpl" />
	
	<bean id="wookiAuthenticationManager"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="wookiUserDetailsService" />
		<property name="passwordEncoder" ref="wookiPasswordEncoder" />
		<property name="saltSource" ref="wookiSaltSource" />
	</bean>

	<bean id="authenticationManager"
		class="org.springframework.security.authentication.ProviderManager">
		<property name="providers">
			<list>
				<ref local="wookiAuthenticationManager" />
			</list>
		</property>
	</bean>

	<bean id="authenticationProcessingFilter"
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<property name="authenticationSuccessHandler" ref="authenticationSuccess" />
		<property name="authenticationFailureHandler" ref="authenticationFailure" />
		<property name="allowSessionCreation" value="true" />
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="filterProcessesUrl" value="${loginFilterProcessesUrl}" />
	</bean>

	<bean id="authenticationSuccess"
		class="com.wooki.services.security.spring.WookiTargetUrlResolver">
		<property name="defaultTargetUrl" value="${defaultTargetUrl}" />
	</bean>

	<bean id="authenticationFailure"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<property name="defaultFailureUrl" value="/signin" />
	</bean>


	<bean id="logoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg value="${logoutTargetUrl}" />
		<constructor-arg>
			<list>
				<bean
					class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
			</list>
		</constructor-arg>
		<property name="filterProcessesUrl" value="${logoutFilterProcessUrl}" />
	</bean>

	<bean id="httpSessionContextIntegrationFilter"
		class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
	</bean>

	<bean id="wookiFilterSecurityMeta"
		class="org.springframework.security.config.http.FilterInvocationSecurityMetadataSourceParser">

	</bean>

	<!--
		Authorization configuration.
	-->
	<bean id="filterSecurityInterceptor"
		class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<property name="authenticationManager">
			<ref bean="authenticationManager" />
		</property>
		<property name="accessDecisionManager">
			<ref bean="accessDecisionManager" />
		</property>
		<property name="rejectPublicInvocations" value="true" />
		<property name="securityMetadataSource">
			<security:filter-security-metadata-source
				path-type="ant" lowercase-comparisons="true">
				<security:intercept-url pattern="/**" access="ROLE_AUTHOR" />
			</security:filter-security-metadata-source>
		</property>
	</bean>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<property name="decisionVoters">
			<list>
				<ref bean="tapestryResourceVoter" />
				<ref bean="roleVoter" />
			</list>
		</property>
	</bean>

	<bean id="tapestryResourceVoter"
		class="com.wooki.services.security.spring.TapestryResourceVoter">
		<constructor-arg>
			<map>
				<entry key="chapter/edit" value-ref="isOwnerAccessController" />
				<entry key="book/settings" value-ref="isOwnerAccessController" />
				<entry key="chapter/issues" value-ref="isOwnerAccessController" />
			</map>
		</constructor-arg>
	</bean>

	<bean id="isOwnerAccessController"
		class="com.wooki.services.security.spring.BookAuthorAccessController">
		<constructor-arg>
			<ref bean="wookiSecurityContext" />
		</constructor-arg>
	</bean>

	<!-- Exception handler -->
	<bean id="exceptionTranslationFilter"
		class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint">
			<ref bean="formLoginAuthenticationEntryPoint" />
		</property>
	</bean>

	<bean id="formLoginAuthenticationEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<property name="loginFormUrl">
			<value>${loginFormUrl}</value>
		</property>
		<property name="forceHttps">
			<value>false</value>
		</property>
	</bean>

	<!-- Servlet API aware filter -->
	<bean id="securityContextHolderAwareRequestFilter"
		class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter">
	</bean>

</beans>
